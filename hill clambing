class Node:
    def __init__(self, value=None, children=None):
        self.value = value     
        self.children = children if children else []  
def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or not node.children:
        return node.value  
    if maximizing_player:
        max_value = float('-inf')
        for child in node.children:
            value = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_value = max(max_value, value)
            alpha = max(alpha, max_value)
            if beta <= alpha:
                break        
        return max_value
    else:
        min_value = float('inf')
        for child in node.children: 
            value = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_value = min(min_value, value)
            beta = min(beta, min_value)
            if beta <= alpha:
                break       
        return min_value
print("The optimal value is:", optimal_value)
